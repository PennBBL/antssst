#!/bin/bash
FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
ANTSSSTBIDS_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
BIDS_DIR=$GEAR_OUTPUT_DIR/bids_dataset
#EXE_SCRIPT=$GEAR_OUTPUT_DIR/antssstbids_run.sh
EXE_SCRIPT=$GEAR_OUTPUT_DIR/pipeline.sh
CONTAINER='[flywheel/antssstbbids]'

# CRITICAL: re-create the environment
cat ${FLYWHEEL_BASE}/docker-env.sh
source ${FLYWHEEL_BASE}/docker-env.sh

function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}


#config_save_outputs="$(parse_config 'save_partial_outputs')"
#config_save_intermediate_work="$(parse_config 'save_intermediate_work')"
#config_intermediate_files="$(parse_config 'intermediate_files')"
#config_intermediate_folders="$(parse_config 'intermediate_folders')"

echo -e "$CONTAINER BEGIN ANTSSSTBIDS DOCKERFILE\n"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END ANTSSSTBIDS DOCKERFILE \n"


# RUN
#time bash /flywheel/v0/output/antssstbids_run.sh #Gets generated prepare_run


#############################################################
##################### PROCESSING STEPS #####################
#############################################################

####### fMRIPrep outputs that pass QA #######
# QA: Prior manual + Euler-based inspection for unchecked images
# Assume csv of form: bblid,seslabel,t1RawDataExclude,cnr_graycsflh,cnr_graycsfrh,
# cnr_graywhitelh,cnr_graywhiterh,euler_lh,euler_rh


######## Find relevant files/paths ########
InDir=/flywheel/v0/input/<...> ### SHOULD BE FMRIPREP OUTPUT NOW
subj=`ls -d ${InDir}/sub* | sed 's#.*/##'`
t1wimages=`find ${InDir}/${subj}/ses*/anat -name "*T1w.nii*"` ### NEED TO CHANGE TO FMRIPREP OUTPUT STRUCTURE
sessions=`ls -d ${InDir}/${subj}/ses* | sed 's#.*/##'`

######## Make output directory ########

OutDir=/flywheel/v0/output/
mkdir ${OutDir}/${subj}
for ses in ${sessions}; do
  mkdir -p ${OutDir}/${subj}/${ses}/anat;
done

######## Run Template Construction ########
# On bias-field corrected, but not skull-stripped, image

for image in ${t1wimages}; do echo "${image}" >> ${OutDir}/tmp_subjlist.csv ; done

antsMultivariateTemplateConstruction.sh \ # Get rid of N4
    -d 3 -o "${OutDir}/${subj}/" \
    -c 2 -j 2 ${OutDir}/tmp_subjlist.csv

######## Rename files as appropriate ########

for ses in ${sessions} ; do
  mv ${OutDir}/${subj}/*_${ses}_* ${OutDir}/${subj}/${ses}/anat;
done

mkdir ${OutDir}/${subj}/scripts
mv ${OutDir}/${subj}/*.sh ${OutDir}/${subj}/scripts
mv ${OutDir}/${subj}/template0.nii.gz ${OutDir}/${subj}/${subj}_template0.nii.gz
mv ${OutDir}/${subj}/templatewarplog.txt ${OutDir}/${subj}/${subj}_templatewarplog.txt
mv ${OutDir}/${subj}/template0Affine.txt ${OutDir}/${subj}/${subj}_template0Affine.txt
mv ${OutDir}/${subj}/template0warp.nii.gz ${OutDir}/${subj}/${subj}_template0warp.nii.gz


######## Remove unnecessary files ########

rm ${OutDir}/tmp_subjlist.csv



#############################################################
#############################################################
#############################################################

if [[ $ANTSSSTBIDS_EXITSTATUS == 0 ]] ; then ### Some other check of outputs

  # Generate zipped output of antssstbids
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/antssstbids_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$ANTSSSTBIDS_OUTPUT_DIR")

  #if [[ $config_save_intermediate_work == 'true' ]] ; then
  #  echo "$CONTAINER  generating zip archive from intermediate work files..."
  #  cd "$GEAR_OUTPUT_DIR"
  #  time zip -q -r "$GEAR_OUTPUT_DIR"/antssstbids_work_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  #fi
  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_antssstbids_"$ANALYSIS_ID"  $(basename "$ANTSSSTBIDS_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_antssstbids_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION. Q: Why project level? And not subject?
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$ANTSSSTBIDS_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $ANTSSSTBIDS_EXITSTATUS
